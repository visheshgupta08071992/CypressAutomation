"use strict";

var _AdLoginStatic = _interopRequireDefault(require("./AdLoginStatic"));

var _AdLoginApiContract = _interopRequireDefault(require("./contracts/AdLoginApiContract"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var gBearerTokens = {};
Cypress.Commands.add("adLoginGetBearerToken", function (marketplace, options) {
  /**
   * Requires a Bearer token to the given Marketplace.  Once required and retrived then
   * it may be retrieved and used by using "cy.adLoginWithBearerToken().then()"
   * Cypress Action Command.
   *
   * Notes:
   *    The Marketplace API client must be set with the following setup (in UI):
   *      Client Type: Non Interactive Setup
   *
   *    In order to test the Marketplace API Client:
   *      curl -X POST
   *        -H "AD-Tenant: ${tenant}"
   *        "${mp_url}/oauth2/token?grant_type=client_credentials&client_id=${clientId}&client_secret=${clientSecret}&scope=ROLE_PARTNER"
   *
   * @param {string} marketplace is the marketplace id to use, as defined by the environment variables.
   *  Ref AdLoginStatic.getMarketplaceEnvInfo().
   * @param {object} options is a key:value sets for the following optional parameters:
   *  {string} oauth2GrantType to define the grant type, default is client_credentials
   *  {string} oauth2Scopes to define a scope list, default is ['ROLE_PARTNER']
   */
  options = options || {};

  var mpEnvInfo = _AdLoginStatic["default"].getMarketplaceEnvInfo(marketplace);

  var mpApiKey = mpEnvInfo.mpApiKey;
  var mpApiSecret = mpEnvInfo.mpApiSecret;
  var url = mpEnvInfo.baseUrl;
  var tenant = options.tenant || mpEnvInfo.tenant;
  var oauth2GrantType = options.oauth2GrantType || 'client_credentials';
  var oauth2Scopes = options.oauth2Scopes || ['ROLE_PARTNER'];
  var request = {
    method: 'POST',
    url: getRequestUrl(url, 'oauth2/token'),
    failOnStatusCode: false,
    headers: {
      'AD-Tenant': tenant
    },
    qs: {
      grant_type: oauth2GrantType,
      client_id: mpApiKey,
      client_secret: mpApiSecret,
      scope: oauth2Scopes.join(' ')
    }
  };
  cy.request(request).then(function (response) {
    // Expected response: {"access_token":"...","token_type":"bearer","expires_in":43199,"scope":"..."}
    // scope depends on the oauth2Scopres list command parameter.
    expect(response.status).to.eq(200);
    expect(response.body.access_token).to.exist;
    expect(response.body.token_type).to.eq('bearer');
    expect(response.body.scope).to.eq(oauth2Scopes.join(' '));
    gBearerTokens[marketplace] = response.body.access_token;
  });
});
Cypress.Commands.add("adLoginWithBearerToken", function (marketplace) {
  /**
   * The Bearer Token, or access token, must be retrieved first by using getBearerToken.
   *
   * Example - then it can be used that way:
   *    cy.adLoginWithBearerToken(<MARKETPLACE>).then((token) => {
   *      cy.log(token);
   *    });
   *
   * @param {string} marketplace is the marketplace id to use, as defined by the environment variables.
   *	Ref AdLoginStatic.getMarketplaceEnvInfo().
   */
  return gBearerTokens[marketplace];
});
Cypress.Commands.add("adLoginApi", function (marketplace, options) {
  /**
   * Login to the given marketplace usign the IAM Authentication API.
   *
   * @param {string} marketplace is the marketplace id to use, as defined by the environment variables:
   *	Ref AdLoginStatic.getMarketplaceEnvInfo().
   * @param {object} options is a key:value sets for the following optional parameters:
   *  {string} username to use to authenticate and open a session, default is defined by env variable.
   *  {string} password to use along with the username, default is defined by env variable.
   *  {string} tenant to use on the given marketplace, default is defined by env variable or APPDIRECT if none.
   *  {string} baseUrl to use with the APIs, default is defined by env variable.
   *  {string} continuationState to use with the authentication endpoint, default is null.
   *
   *  @returns {AdLoginApiContract} promise with authentication and sessions information used in cy chainning.
   */
  options = options || {};
  var authenticatePath = 'api/iam/v1/authenticate';
  var sessionsPath = 'api/iam/v1/sessions';

  var mpEnvInfo = _AdLoginStatic["default"].getMarketplaceEnvInfo(marketplace);

  var username = options.username || mpEnvInfo.username;
  var password = options.password || mpEnvInfo.password;
  var tenant = options.tenant || mpEnvInfo.tenant;
  var baseUrl = options.baseUrl || mpEnvInfo.baseUrl;
  var continuationState = options.continuationState;
  var headers = {
    "AD-Tenant": tenant,
    "Content-Type": "application/json"
  }; // Authentication:

  var authenticateBody = {
    username: username,
    password: password,
    continuationState: continuationState,
    persistentLogin: false
  };
  var authenticateRequest = {
    method: 'POST',
    url: getRequestUrl(baseUrl, authenticatePath),
    headers: headers,
    body: authenticateBody
  };
  var responses = new _AdLoginApiContract["default"]();
  cy.request(authenticateRequest).then(function (response) {
    expect(response.status).to.eq(200);
    responses.update(response.body);
    var sessionToken = response.body.sessionToken; // Set session's token:

    var sessionsRequest = {
      method: 'POST',
      url: getRequestUrl(baseUrl, sessionsPath),
      headers: headers,
      body: {
        sessionToken: sessionToken
      }
    };
    cy.request(sessionsRequest).then(function (response) {
      expect(response.status).to.eq(200);
      responses.update(response.body);
      return cy.wrap(responses);
    });
  });
});

function getRequestUrl(baseUrl, endpoint) {
  /**
   * Get the full URL for a given endpoint.
   *
   * @param {string} baseUrl is the test cluster Base URL
   * @param {string} endpoint is the servive endpoint, without the version
   */
  return "".concat(baseUrl, "/").concat(endpoint);
}