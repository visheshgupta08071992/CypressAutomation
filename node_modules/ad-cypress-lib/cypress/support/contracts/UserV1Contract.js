"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _en_US = _interopRequireDefault(require("faker/locale/en_US"));

var _DefaultContract2 = _interopRequireDefault(require("./DefaultContract"));

var _CreateCompanyContactV1Contract = _interopRequireDefault(require("./CreateCompanyContactV1Contract"));

var _UserMembershipV1ContractList = _interopRequireDefault(require("./UserMembershipV1ContractList"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var UserV1Contract = /*#__PURE__*/function (_DefaultContract) {
  _inherits(UserV1Contract, _DefaultContract);

  var _super = _createSuper(UserV1Contract);

  function UserV1Contract() {
    var _this;

    _classCallCheck(this, UserV1Contract);

    // ref https://github.com/AppDirect/ipa-customer-billing/pull/52/files#diff-a445eae220691e39fd0d021f4a7afc533aff105a890187d93f44a009123f67f7R91
    _this = _super.call(this);
    _this.contact = null; // Object (dictionary)

    _this.customAttributes = null; // Object (dictionary)

    _this.deleted = null; // Boolean

    _this.email = null; // String

    _this.firstName = null; // String

    _this.idpUuid = null; // String

    _this.language = null; // String

    _this.lastName = null; // String

    _this.locale = null; // String

    _this.password = null; // String

    _this.profilePic = null; // String

    _this.registrationCode = null; // String

    _this.resellerUserCompanyAssociations = null; // Array

    _this.roles = null; // Array of String (to verify)

    _this.salesAgent = null; // TBD

    _this.status = null; // String [ACTIVE, INACTIVE]

    _this.title = null; // String

    _this.username = null; // String
    // Response:

    _this.activationUrl = null;
    _this.creationDate = null; // Number

    _this.externalId = null;
    _this.id = null;
    _this.internalId = null;
    _this.lastSuccessfulLogin = null; // Number

    _this.memberships = null; // Object

    _this.openId = null;
    return _this;
  }

  _createClass(UserV1Contract, [{
    key: "fakeTestData",
    value: function fakeTestData(company, options) {
      options = options || {};
      var domain = company.emailAddress ? company.emailAddress.split('@')[1] : null;
      var titles = ['MR', 'MS', 'COMPANY'];
      this.contact = options.contact || new _CreateCompanyContactV1Contract["default"]().fakeTestData();
      this.customAttributes = options.customAttributes || {};
      this.deleted = options.deleted || false;
      this.firstName = options.firstName || _en_US["default"].name.firstName();
      this.idpUuid = options.idpUuid;
      this.language = options.language || 'en';
      this.lastName = options.lastName || _en_US["default"].name.lastName();
      this.locale = options.locale || 'en_US';
      this.password = options.password || _en_US["default"].internet.password(); // It doesn't need to be crypted.

      this.profilePic = options.profilePic || _en_US["default"].image.people() + '.png';
      this.registrationCode = options.registrationCode;
      this.resellerUserCompanyAssociations = options.resellerUserCompanyAssociations;
      this.roles = options.roles || ['USER'];
      this.salesAgent = options.salesAgent; // Not sure about the data structure.

      this.status = options.status || 'INACTIVE'; // User must be created INACTIVE then be ACTIVATED using PUT.

      this.title = options.title || _en_US["default"].random.arrayElement(titles);
      this.email = options.email || "cypress.".concat(this.firstName, ".").concat(this.lastName, ".").concat(_en_US["default"].random.number({
        min: 100000,
        max: 999999
      }), "@").concat(domain).toLowerCase();
      this.username = options.username || this.email;
      return this;
    }
  }, {
    key: "getCreateUserRequest",
    value: function getCreateUserRequest() {
      return {
        contact: this.contact !== null ? this.contact.get() : null,
        customAttributes: this.customAttributes,
        deleted: this.deleted,
        email: this.email,
        firstName: this.firstName,
        idpUuid: this.idpUuid,
        language: this.language,
        lastName: this.lastName,
        locale: this.locale,
        password: this.password,
        profilePic: this.profilePic,
        registrationCode: this.registrationCode,
        resellerUserCompanyAssociations: this.resellerUserCompanyAssociations,
        roles: this.roles,
        salesAgent: this.salesAgent,
        status: this.status,
        title: this.title,
        username: this.username
      };
    }
  }, {
    key: "getActivateUserRequest",
    value: function getActivateUserRequest() {
      var body = this.getCreateUserRequest();
      delete body.roles;
      return body;
    }
  }, {
    key: "get",
    value: function get() {
      return _objectSpread(_objectSpread({}, this.getCreateUserRequest()), {}, {
        activationUrl: this.activationUrl,
        creationDate: this.creationDate,
        externalId: this.externalId,
        id: this.id,
        internalId: this.internalId,
        lastSuccessfulLogin: this.lastSuccessfulLogin,
        memberships: this.memberships !== null ? this.memberships.get() : null,
        openId: this.openId
      });
    }
  }, {
    key: "update",
    value: function update(options) {
      // the update() method will also verify the response body fileds or contract.
      this.activationUrl = options.activationUrl;
      this.contact = _typeof(options.contact) === 'object' ? new _CreateCompanyContactV1Contract["default"]().update(options.contact) : null;
      this.creationDate = options.creationDate;
      this.customAttributes = options.customAttributes;
      this.deleted = options.deleted;
      this.email = options.email;
      this.externalId = options.externalId;
      this.firstName = options.firstName;
      this.id = options.id;
      this.idpUuid = options.idpUuid;
      this.internalId = options.internalId;
      this.language = options.language;
      this.lastName = options.lastName;
      this.lastSuccessfulLogin = options.lastSuccessfulLogin;
      this.locale = options.locale;
      this.memberships = typeof options.memberships != 'undefined' && Array.isArray(options.memberships) ? new _UserMembershipV1ContractList["default"]().append(options.memberships) : null;
      this.openId = options.openId;
      this.password = options.password;
      this.resellerUserCompanyAssociations = options.resellerUserCompanyAssociations;
      this.profilePic = options.profilePic;
      this.registrationCode = options.registrationCode;
      this.roles = options.roles;
      this.salesAgent = options.salesAgent;
      this.status = options.status;
      this.title = options.title;
      this.username = options.username;
      return this;
    }
  }]);

  return UserV1Contract;
}(_DefaultContract2["default"]);

exports["default"] = UserV1Contract;
;