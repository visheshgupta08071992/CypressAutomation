"use strict";

var _AdLoginStatic = _interopRequireDefault(require("./AdLoginStatic"));

var _ActiveUserCreationAccountV2Contract = _interopRequireDefault(require("./contracts/ActiveUserCreationAccountV2Contract"));

var _CompanyAccountV2Contract = _interopRequireDefault(require("./contracts/CompanyAccountV2Contract"));

var _CreateCompanyV1Contract = _interopRequireDefault(require("./contracts/CreateCompanyV1Contract"));

var _CreateCompanyV2Contract = _interopRequireDefault(require("./contracts/CreateCompanyV2Contract"));

var _PagedCompanyAccountV2Contract = _interopRequireDefault(require("./contracts/PagedCompanyAccountV2Contract"));

var _UserV1Contract = _interopRequireDefault(require("./contracts/UserV1Contract"));

var _UserV1ContractList = _interopRequireDefault(require("./contracts/UserV1ContractList"));

var _CompanyAccountV2ContractList = _interopRequireDefault(require("./contracts/CompanyAccountV2ContractList"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

Cypress.Commands.add("adCompaniesCreateCompanyV1", function (marketplace, options) {
  /**
   * Cypress Custom command to Create a company in the AppMarket with API V1.
   *
   * @param {string} marketplace is the marketplace id to use, as defined by the environment variables.
   * 	Ref AdLoginStatic.getMarketplaceEnvInfo().
   * @param {object} options is the key:value sets used as optional parameters:
   * 	tenant {string} is the marketplace tenant as defined in the test cluster
   *  company {object} is the options parameter for CreateCompanyV1Contract.fakeTestData(options)
   *
   * @returns {CreateCompanyV1Contract} company
   */
  options = options || {};

  var mpEnvInfo = _AdLoginStatic["default"].getMarketplaceEnvInfo(marketplace);

  var tenant = options.tenant || mpEnvInfo.tenant || 'APPDIRECT';
  var company = new _CreateCompanyV1Contract["default"]().fakeTestData(options.company);
  cy.log('Company creation request: ' + company.toString());
  cy.adLoginWithBearerToken(marketplace).then(function (token) {
    var request = {
      method: 'POST',
      url: getRequestForAccountUrl(marketplace, 'companies', {
        version: 'v1'
      }),
      failOnStatusCode: false,
      headers: _AdLoginStatic["default"].getRequestHeaders(tenant, token),
      body: company.toString()
    };
    cy.request(request).then(function (response) {
      expect(response.status).to.eq(201);
      var created = new _CreateCompanyV1Contract["default"]().update(response.body);
      cy.log('Created company response: ' + created.toString());
      return cy.wrap(created);
    });
  });
});
Cypress.Commands.add("adCompaniesCreateCompanyV2", function (marketplace, options) {
  /**
   * NOTE: DON'T USE - This API can't be used for the moment since a company created with API V2
   * requires the domain to be verified, which is currently impossible to do with APIs.
   * Use adCompaniesCreateCompanyV1() version for the moment.
   *
   * Cypress Custom command to Create a company in the AppMarket with API V2.
   *
   * @param {string} marketplace is the marketplace id to use, as defined by the environment variables:
   * 	Ref AdLoginStatic.getMarketplaceEnvInfo().
   * @param {object} options is the key:value sets used as optional parameters:
   * 	apiVersion {string} is the account API version to use, default is v2.
   * 	tenant {string} is the marketplace tenant as defined in the test cluster.
   *  company {object} is the options parameter for CreateCompanyV2Contract.fakeTestData(options)
   *
   * @returns {CreateCompanyV2Contract} company
   */
  options = options || {};

  var mpEnvInfo = _AdLoginStatic["default"].getMarketplaceEnvInfo(marketplace);

  var tenant = options.tenant || mpEnvInfo.tenant || 'APPDIRECT';
  var company = new _CreateCompanyV2Contract["default"]().fakeTestData(options.company);
  cy.log('Company creation request: ' + company.toString());
  cy.adLoginWithBearerToken(marketplace).then(function (token) {
    var request = {
      method: 'POST',
      url: getRequestForAccountUrl(marketplace, 'companies', {
        version: options.apiVersion
      }),
      failOnStatusCode: false,
      headers: _AdLoginStatic["default"].getRequestHeaders(tenant, token),
      body: company.toString()
    };
    cy.request(request).then(function (response) {
      // TODO: documentation tells 201 but the API endpoint returns 200;
      expect(response.status).to.be.oneOf([200, 201]);
      var created = new _CreateCompanyV2Contract["default"]().update(response.body);
      cy.log('Created company response: ' + created.toString());
      return cy.wrap(created);
    });
  });
});
Cypress.Commands.add("adCompaniesListAllCompanies", function (marketplace, options) {
  /**
   * Cypress Custom command to list all companies for a given marketplace - according to options.
   *
   * @param {string} marketplace is the marketplace id to use, as defined by the environment variables.
   * 	Ref AdLoginStatic.getMarketplaceEnvInfo().
   * @param {object} options is the key:value sets used as optional parameters:
   * 	apiVersion {string} is the account API version to use, default is v2.
   * 	tenant {string} is the marketplace tenant as defined in the test cluster.
   *
   * @returns {PagedCompanyAccountV2Contract} companies
   */
  options = options || {};
  var apiVersion = options.apiVersion;

  var mpEnvInfo = _AdLoginStatic["default"].getMarketplaceEnvInfo(marketplace);

  var tenant = options.tenant || mpEnvInfo.tenant || 'APPDIRECT';
  cy.adLoginWithBearerToken(marketplace).then(function (token) {
    var request = {
      method: 'GET',
      url: getRequestForAccountUrl(marketplace, 'companies', {
        version: apiVersion
      }),
      failOnStatusCode: false,
      headers: _AdLoginStatic["default"].getRequestHeaders(tenant, token),
      body: {}
    };
    cy.request(request).then(function (response) {
      expect(response.status).to.eq(200);
      cy.log('Get company page response: ' + JSON.stringify(response.body));
      var companies = new _PagedCompanyAccountV2Contract["default"]().update(response.body);
      return cy.wrap(companies);
    });
  });
});
Cypress.Commands.add("adCompaniesFindInCompanies", {
  prevSubject: true
}, function (comapnies, key, value) {
  /**
   * Cypress Custom command to to parse a list of companies for given key and value.
   *
   * @param {PagedCompanyAccountV2Contract} companies from a marketplace
   * @param {string} key to seach the companies for.
   * @param {string} value that the value should contain.
   *
   * @returns {CompanyAccountV2ContractList} companies
   */
  var matches = new _CompanyAccountV2ContractList["default"]();
  comapnies.content.list.forEach(function (company) {
    if (company[key] === value) {
      matches.append([company]);
    }
  });
  return cy.wrap(matches);
});
Cypress.Commands.add("adCompaniesJunkCompany", function (marketplace, company, options) {
  /**
   * Cypress Custom command to disable then junk a given company. Junk means that the company name
   * will become CYPRESS-JUNK so that it can be trashed using future APIs or a SQL query.
   *
   * @param {string} marketplace is the marketplace id to use, as defined by the environment variables.
   * 	Ref AdLoginStatic.getMarketplaceEnvInfo().
   * @param {object} company is the CompanyAccountV2Contract object that contains the company to junk.
   * @param {object} options is the key:value sets used as optional parameters:
   * 	apiVersion {string} is the account API version to use, default is v2.
   *
   * @returns {CompanyAccountV2Contract} company
   */
  options = options || {};
  var apiVersion = options.apiVersion;

  var mpEnvInfo = _AdLoginStatic["default"].getMarketplaceEnvInfo(marketplace);

  var tenant = options.tenant || mpEnvInfo.tenant || 'APPDIRECT';
  company.name = 'CYPRESS-JUNK';
  company.enabled = 'false';
  cy.adLoginWithBearerToken(marketplace).then(function (token) {
    var request = {
      method: 'PUT',
      url: getRequestForAccountUrl(marketplace, "companies/".concat(company.uuid), {
        version: apiVersion
      }),
      failOnStatusCode: false,
      headers: _AdLoginStatic["default"].getRequestHeaders(tenant, token),
      body: company.toString()
    };
    cy.request(request).then(function (response) {
      expect(response.status).to.eq(200);
      cy.log('PUT junk company response: ' + JSON.stringify(response.body));
      var updated = new _CompanyAccountV2Contract["default"]().update(response.body);
      return cy.wrap(updated);
    });
  });
});
Cypress.Commands.add("adCompaniesCreateUserV1", function (marketplace, company, options) {
  /**
   * Cypress Custom command to create a user for a given company in the AppMarket using IAM API v1.
   *
   * @param {string} marketplace is the marketplace id to use, as defined by the environment variables.
   * 	Ref AdLoginStatic.getMarketplaceEnvInfo().
   * @param {CreateCompanyV1Contract} company will be associated as a membership for the created user.
   * @param {object} options is the key:value sets used as optional parameters:
   * 	tenant {string} is the marketplace tenant as defined in the test cluster.
   *  user {object} is the options parameter of the UserV1Contract.fakeTestData(options) method.
   *
   * @returns {UserV1Contract} user
   */
  options = options || {};

  var mpEnvInfo = _AdLoginStatic["default"].getMarketplaceEnvInfo(marketplace);

  var tenant = options.tenant || mpEnvInfo.tenant || 'APPDIRECT';
  var user = new _UserV1Contract["default"]().fakeTestData(company, options.user);
  cy.adLoginWithBearerToken(marketplace).then(function (token) {
    var request = {
      method: 'POST',
      url: getRequestForAccountUrl(marketplace, "companies/".concat(company.uuid, "/users"), {
        version: 'v1'
      }),
      failOnStatusCode: false,
      headers: _AdLoginStatic["default"].getRequestHeaders(tenant, token),
      body: JSON.stringify(user.getCreateUserRequest()),
      qs: {
        sendNotification: false
      }
    };
    cy.request(request).then(function (response) {
      expect(response.status).to.eq(201);
      var created = new _UserV1Contract["default"]().update(response.body);
      cy.log('Created user UserV1Contract(): ' + created.toString());
      created.password = user.password;
      return cy.wrap(created);
    });
  });
});
Cypress.Commands.add("adCompaniesCreateUserV2", function (marketplace, company, options) {
  /**
   * NOTE: DON'T USE - This API can't be used for the moment since a company created with API V2
   * requires the domain to be verified, which is currently impossible to do with APIs.
   * Use adCompaniesCreateUserV1() version for the moment.
  	 * Cypress Custom command to Create a company in the AppMarket.
   *
   * @param {string} marketplace is the marketplace id to use, as defined by the environment variables.
   * 	Ref AdLoginStatic.getMarketplaceEnvInfo().
   * @param {object} options is the key:value sets used as optional parameters:
   * 	apiVersion {string} is the account API version to use, default is v2.
   * 	tenant {string} is the marketplace tenant as defined in the test cluster.
  	 *  user {object} is the options parameter of the ActiveUserCreationAccountV2Contract.fakeTestData(options) method.
    *
   * @returns {CreateCompanyV2Contract} user
   */
  options = options || {};

  var mpEnvInfo = _AdLoginStatic["default"].getMarketplaceEnvInfo(marketplace);

  var tenant = options.tenant || mpEnvInfo.tenant || 'APPDIRECT';
  var user = new _ActiveUserCreationAccountV2Contract["default"]().fakeTestData(company, options.user);
  cy.log('User creation request: ' + user.toString());
  cy.adLoginWithBearerToken(marketplace).then(function (token) {
    var request = {
      method: 'POST',
      url: getRequestForAccountUrl(marketplace, "companies/".concat(company.uuid, "/memberships/active"), {
        version: options.apiVersion
      }),
      failOnStatusCode: false,
      headers: _AdLoginStatic["default"].getRequestHeaders(tenant, token),
      body: user.toString()
    };
    cy.request(request).then(function (response) {
      expect(response.status).to.eq(200);
      var created = new _CreateCompanyV2Contract["default"]().update(response.body);
      cy.log('Created company response: ' + created.toString());
      return cy.wrap(created);
    });
  });
});
Cypress.Commands.add("adCompaniesActivateUserV1", function (marketplace, user, options) {
  /**
   * Cypress Custom command to activate an inactive user in the AppMarket using IAM API v1.
   *
   * @param {string} marketplace is the marketplace id to use, as defined by the environment variables.
   * 	Ref AdLoginStatic.getMarketplaceEnvInfo().
   * @param {UserV1Contract} user to activate.
   * @param {object} options is the key:value sets used as optional parameters:
   * 	tenant {string} is the marketplace tenant as defined in the test cluster.
   *
   * @returns {UserV1Contract} user
   */
  options = options || {};

  var mpEnvInfo = _AdLoginStatic["default"].getMarketplaceEnvInfo(marketplace);

  var tenant = options.tenant || mpEnvInfo.tenant || 'APPDIRECT';
  user.status = 'ACTIVE';
  cy.adLoginWithBearerToken(marketplace).then(function (token) {
    var request = {
      method: 'PUT',
      url: getRequestForAccountUrl(marketplace, "users/".concat(user.id), {
        version: 'v1'
      }),
      failOnStatusCode: false,
      headers: _AdLoginStatic["default"].getRequestHeaders(tenant, token),
      body: JSON.stringify(user.getActivateUserRequest())
    };
    cy.request(request).then(function (response) {
      expect(response.status).to.eq(200);
      var updated = new _UserV1Contract["default"]().update(response.body);
      updated.password = user.password;
      cy.log('Updated user response: ' + updated.toString());
      return cy.wrap(updated);
    });
  });
});
Cypress.Commands.add("adCompaniesUpdateUserV1", function (marketplace, user, options) {
  /**
   * Cypress Custom command to activate an inactive user in the AppMarket using IAM API v1.
   *
   * @param {string} marketplace is the marketplace id to use, as defined by the environment variables.
   * 	Ref AdLoginStatic.getMarketplaceEnvInfo().
   * @param {UserV1Contract} user to activate.
   * @param {object} options is the key:value sets used as optional parameters:
   * 	tenant {string} is the marketplace tenant as defined in the test cluster.
   *
   * @returns {UserV1Contract} user
   */
  options = options || {};

  var mpEnvInfo = _AdLoginStatic["default"].getMarketplaceEnvInfo(marketplace);

  var tenant = options.tenant || mpEnvInfo.tenant || 'APPDIRECT';
  cy.adLoginWithBearerToken(marketplace).then(function (token) {
    var request = {
      method: 'PUT',
      url: getRequestForAccountUrl(marketplace, "users/".concat(user.id), {
        version: 'v1'
      }),
      failOnStatusCode: false,
      headers: _AdLoginStatic["default"].getRequestHeaders(tenant, token),
      body: JSON.stringify(user.getCreateUserRequest())
    };
    cy.request(request).then(function (response) {
      expect(response.status).to.eq(200);
      var updated = new _UserV1Contract["default"]().update(response.body);
      updated.password = user.password;
      cy.log('Updated user response: ' + updated.toString());
      return cy.wrap(updated);
    });
  });
});
Cypress.Commands.add("adCompaniesListAllUserV1", function (marketplace, company, options) {
  /**
   * Cypress Custom command to list all users for a given company in the AppMarket using IAM API v1.
   *
   * @param {string} marketplace is the marketplace id to use, as defined by the environment variables.
   * 	Ref AdLoginStatic.getMarketplaceEnvInfo().
   * @param {CompanyAccountV2Contract} company to list the users from.
   * @param {object} options is the key:value sets used as optional parameters:
   * 	tenant {string} is the marketplace tenant as defined in the test cluster.
   *
   * @returns {UserV1ContractList} users
   */
  options = options || {};

  var mpEnvInfo = _AdLoginStatic["default"].getMarketplaceEnvInfo(marketplace);

  var tenant = options.tenant || mpEnvInfo.tenant || 'APPDIRECT';
  cy.adLoginWithBearerToken(marketplace).then(function (token) {
    var request = {
      method: 'GET',
      url: getRequestForAccountUrl(marketplace, "companies/".concat(company.uuid, "/users"), {
        version: 'v1'
      }),
      failOnStatusCode: false,
      headers: _AdLoginStatic["default"].getRequestHeaders(tenant, token)
    };
    cy.request(request).then(function (response) {
      expect(response.status).to.eq(200);
      var users = new _UserV1ContractList["default"]().append(response.body);
      cy.log(JSON.stringify(response.body));
      return cy.wrap(users);
    });
  });
});
Cypress.Commands.add("adCompaniesFindInUsers", {
  prevSubject: true
}, function (users, key, value) {
  /**
   * Cypress Custom command to to parse a list of users for given key and value.
   *
   * @param {UserV1ContractList} users from a marketplace
   * @param {string} key to seach the users for.
   * @param {string} value that the value should contain.
   *
   * @returns {UserV1ContractList} user
   */
  var matches = new _UserV1ContractList["default"]();
  users.list.forEach(function (user) {
    if (user[key] === value) {
      matches.append([user]);
    }
  });
  return cy.wrap(matches);
});
Cypress.Commands.add("adCompaniesJunkUserV1", function (marketplace, user, options) {
  /**
   * Cypress Custom command to junk an user in the AppMarket using IAM API v1.
   *
   * @param {string} marketplace is the marketplace id to use, as defined by the environment variables.
   * 	Ref AdLoginStatic.getMarketplaceEnvInfo().
   * @param {UserV1Contract} user to activate.
   * @param {object} options is the key:value sets used as optional parameters:
   * 	tenant {string} is the marketplace tenant as defined in the test cluster.
   *
   * @returns {UserV1Contract} user
   */
  options = options || {};

  var mpEnvInfo = _AdLoginStatic["default"].getMarketplaceEnvInfo(marketplace);

  var tenant = options.tenant || mpEnvInfo.tenant || 'APPDIRECT';
  user.status = 'INACTIVE';
  user.enabled = false;
  user.firstName = 'CYPRESS-JUNK';
  user.lastName = 'CYPRESS-JUNK';
  cy.adLoginWithBearerToken(marketplace).then(function (token) {
    var request = {
      method: 'PUT',
      url: getRequestForAccountUrl(marketplace, "users/".concat(user.id), {
        version: 'v1'
      }),
      failOnStatusCode: false,
      headers: _AdLoginStatic["default"].getRequestHeaders(tenant, token),
      body: JSON.stringify(user.getActivateUserRequest())
    };
    cy.request(request).then(function (response) {
      expect(response.status).to.eq(200);
      var updated = new _UserV1Contract["default"]().update(response.body);
      updated.password = user.password;
      cy.log('Updated user response: ' + updated.toString());
      return cy.wrap(updated);
    });
  });
});

function getRequestForAccountUrl(marketplace, endpoint, options) {
  /**
   * Get the full URL for a given Account endpoint.
   *
   * @param {string} marketplace is the marketplace id to use, as defined by the environment variables.
   * 	Ref AdLoginStatic.getMarketplaceEnvInfo().
   * @param {string} endpoint is the servive endpoint, without the version
   * @param {object} options is the key:value sets as optional extra parameters
   * 	version {string} is the endpoint version to use, default is v2
   *
   * @returns {string} url
   */
  options = options || {};

  var mpEnvInfo = _AdLoginStatic["default"].getMarketplaceEnvInfo(marketplace);

  var version = options.version || 'v2';
  var baseUrl = options.baseUrl || mpEnvInfo.baseUrl;
  return "".concat(baseUrl, "/api/account/").concat(version, "/").concat(endpoint);
}