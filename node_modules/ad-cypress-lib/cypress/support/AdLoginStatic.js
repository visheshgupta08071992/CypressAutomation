"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _crypto = _interopRequireDefault(require("crypto"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var AdLoginStatic = /*#__PURE__*/function () {
  function AdLoginStatic() {
    _classCallCheck(this, AdLoginStatic);
  }

  _createClass(AdLoginStatic, null, [{
    key: "getRequestHeaders",
    value: function getRequestHeaders(tenant, token, options) {
      /**
       * Get the headers to use with cy.request() command.
       *
       * @param {string} tenant is the marketplace tenant as defined in the test cluster
       * @param {string} token to use with the bearer authorization format.
       * @param {object} options is a key:value sets as optional extra parameters:
       *	ContentType: default is application/json
       *	Accept: default is application/json
       */
      options = options || {};
      var contentType = options.contentType || 'application/json';
      var accept = options.accept || 'application/json';
      return {
        'AD-Tenant': tenant,
        'Authorization': "bearer ".concat(token),
        'Content-Type': contentType,
        'Accept': accept
      };
    }
  }, {
    key: "getMarketplaceEnvInfo",
    value: function getMarketplaceEnvInfo(marketplace) {
      /**
       * Retrieve environment variables for the BASE_URL and tenant.
       *
       * @param {string} marketplace is the marketplace id to use, as defined by the environment variables.
       *	Ref AdLoginStatic.getMarketplaceEnvInfo().
       */
      return {
        baseUrl: Cypress.env("".concat(marketplace, "_BASE_URL")) || Cypress.config().baseUrl,
        tenant: Cypress.env("".concat(marketplace, "_TENANT")),
        mpApiKey: Cypress.env("".concat(marketplace, "_API_KEY")),
        mpApiSecret: Cypress.env("".concat(marketplace, "_API_SECRET")),
        passwordSecret: Cypress.env("".concat(marketplace, "_PASSWORD_SECRET")),
        username: Cypress.env("".concat(marketplace, "_USERNAME")),
        password: Cypress.env("".concat(marketplace, "_PASSWORD"))
      };
    }
  }, {
    key: "generateSha1Password",
    value: function generateSha1Password(password, secret) {
      var key = _crypto["default"].pbkdf2Sync(password, secret, 10000, 32, 'sha1');

      return key.toString('base64').toString('utf16');
    }
  }]);

  return AdLoginStatic;
}();

exports["default"] = AdLoginStatic;